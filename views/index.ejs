<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.2/css/all.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="/styles/styles.css" />
    <title>ToDo App</title>
  </head>
  <nav
      class="navbar navbar-expand-lg bg-body-tertiary"
      style="padding-right: 20px; padding-top: 20px; padding-bottom: 20px"
    >
      <div
        class="container-fluid"
        style="padding-left: 20px; padding-right: 20px"
      >
        <a class="navbar-brand" href="#">
          <!-- <img
            src="/docs/5.3/assets/brand/bootstrap-logo.svg"
            alt="Logo"
            width="30"
            height="24"
            class="d-inline-block align-text-top"
          /> -->
          todoApp
        </a>

        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="#">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item dropdown">
              <a
                class="nav-link dropdown-toggle"
                href="#"
                role="button"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                Dropdown
              </a>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#">Action</a></li>
                <li><a class="dropdown-item" href="#">Another action</a></li>
                <li><hr class="dropdown-divider" /></li>
                <li>
                  <a class="dropdown-item" href="#">Something else here</a>
                </li>
              </ul>
            </li>
          </ul>
          <a class="btn btn-outline-danger" href="/logout" role="button"
            >Log out</a
          >
        </div>
      </div>
    </nav>
  <body>
    <div class="container">
      <div class="col-sm box" id="heading">
        <!-- DATE DATA -->
        <%- include("partials/date.ejs") %>
      </div>
      
      <div class="box" id="weather">
        <h4>Today's Weather: <%=fahrenheit %>°F / <%=celsius %>°C </h4>
      </div>
      
      <div class="box" id="mainlist">
        <div class="box" id="checklist">

          <form class="item" action="/daily" method="post">
            <input id="newTaskInput" type="text" name="newTask" placeholder="New task..." />
            <label for="priority">Priority level: </label>
            <select name="priority" id="priority">
              <option value="high">High</option>
              <option value="med">Medium</option>
              <option value="low">Low</option>
            </select>
            <button class="btn btn-outline-primary" type="submit" name="task">
              Submit
            </button>
          </form>

          <% const priorityOrder = ["high", "med", "low"]; %>
          <% priorityOrder.forEach(priority => { %>
            <% if (tasks[priority]) { %>
              <% tasks[priority].forEach((task) => { %>
                <div class="task <%= priority %>" data-taskId="<%= task[Object.keys(task)[0]] %>">
                  <div class="badge-container">
                    <% if (priority === "high") { %>
                      <span class="badge bg-danger text-white"> <%= priority.toUpperCase() %></span>
                      <% } else if (priority === "med") { %>
                        <span class="badge bg-warning text-black"> <%= priority.toUpperCase() %></span>
                        <% } else if (priority === "low") { %>
                          <span class="badge bg-info text-black"> <%= priority.toUpperCase() %></span>
                          <% } %>   
                  </div>        

                  <div class="content">
                    <input type="checkbox" name="checkbox" value=0 />
                    <label name="labelElement" class="unchecked" contenteditable="false" for="<%= task %>"><%=  Object.keys(task)[0] %></label>
                    <span class="placeholder" style="display: none;">&#8203;</span>
                  </div>
                  <!-- Could modify this by adding      ^ onclick="toggleChecked(this);"-->
                  <button id="editButton" class="btn btn-outline-secondary btn-sm editButton" type="button" name="Edit">Edit</button>
                </div>
              <% }); %>
            <% } %>
          <% }); %>

          <button id="#deleteButton" class="hiddenButton" type="button" name="Delete">Delete</button>
          <button id="#saveButton" class="hiddenButton" type="button" name="Save">Save</button>
          
        </div>
      </div>
    </div>
    <script>

      document.addEventListener("DOMContentLoaded", function() {
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');

        checkboxes.forEach(function(checkbox) {
          const labelElement = checkbox.nextElementSibling;

          if (labelElement.classList.contains("checked")) {
            checkbox.checked = true;
          } else {
            checkbox.checked = false;
          }
        })
      })
      
      document.addEventListener("DOMContentLoaded", () => {
        const editButtonArray = document.getElementsByClassName("editButton");

        for (let i = 0; i < editButtonArray.length; i++) {
          editButtonArray[i].addEventListener("click", function() {
            const labelElement = this.previousElementSibling.querySelector("label");
            const placeholderSpan = this.previousElementSibling.querySelector(".placeholder");
            const saveButton = document.getElementById("#saveButton");

            if (!labelElement.textContent.trim()) {
              placeholderSpan.style.display = "inline";
              labelElement.textContent = placeholderSpan.textContent;
            } else {
              placeholderSpan.style.display = "none";
            }

            labelElement.contentEditable = "true";
            labelElement.focus();

            saveButton.classList.remove("hiddenButton");
          });
        } 
          const saveButton = document.getElementById("#saveButton");
          saveButton.addEventListener("click", async function() {
            console.log("CLICKED!!!!!!!!!!!");
            console.log("THIS:" + this);
            console.log("THIS CLOSEST: " + this.closest(".task"));
            saveButton.classList.add("hiddenButton");

            const labelElement = document.querySelector(".task label[contenteditable=true]");
            const newTaskText = labelElement.textContent.trim();

            const taskID = this.closest(".task").dataset.taskId;

            try {
              const response = await fetch(`/daily/update-task/${taskID}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                taskId: taskID,
                newTaskText: newTaskText
              })
            });

            if (response.ok) {
              console.log("Task updated successfully");
            } else {
              console.error("Failed to update task");
            }
          } catch (error) {
            console.error("Error updating task: ", error);
          }
        });
      });
      
      
      const checkboxList = document.getElementById("checklist");
      const checkedElements = [];

      checkboxList.addEventListener("click", (event) => {
        const clickedElement = event.target;

        if (clickedElement.type === "checkbox") {
          const labelElement = clickedElement.nextElementSibling;
          const deleteButton = document.getElementById("#deleteButton");

          if (labelElement.classList.contains("unchecked")) {
            labelElement.classList.remove("unchecked");
            labelElement.classList.add("checked");
            const index = checkedElements.indexOf(clickedElement);
            if (index === -1) {
              checkedElements.push(clickedElement);
            }

            if (checkedElements.length > 0) {
              deleteButton.classList.remove("hiddenButton");
              console.log(checkedElements);
            }    
            
            console.log("CLICKED");
          } else if (labelElement.classList.contains("checked")) {
            labelElement.classList.remove("checked");
            labelElement.classList.add("unchecked");
            const index = checkedElements.indexOf(clickedElement);
            if (index !== -1) {
              checkedElements.splice(index, 1);
            }

            if (checkedElements.length == 0) {
              deleteButton.classList.add("hiddenButton");
              console.log(checkedElements);
            }
            // console.log("unclicked");
          }
        }
      });

      const deleteButton = document.getElementById("#deleteButton");
      deleteButton.addEventListener("click", () => {
        checkedElements.forEach(checkbox => {
          const labelElement = checkbox.nextElementSibling;
          const taskText = labelElement.innerHTML;

          fetch(`/daily/delete-task/${encodeURIComponent(taskText)}`, {
            method: 'DELETE',
          }).then(response => {
            if (response.ok) {
              console.log("Task deleted: ", taskText);
              const taskElement = checkbox.closest('.task');
              if (taskElement) {
                taskElement.remove();
              }
            } else {
              throw new Error('Failed to delete task');
            }
          }).catch(error => {
            console.error('Error: ', error);
          });
        });

        checkedElements.length = 0;
        deleteButton.classList.add("hiddenButton");
      })

      document.addEventListener("DOMContentLoaded", () => {
        const taskContainers = document.querySelector('.task');
        taskContainers.forEach(function(taskContainer) {
          const editButton = taskContainer.querySelector('.editButton');

          taskContainer.addEventListener('mouseenter', () => {
            editButton.style.opacity = '1';
          });

          taskContainer.addEventListener('mouseleave', () => {
            editButton.style.opacity = '0';
          });
        });
      });

      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"

</script>
  </body>
</html>
